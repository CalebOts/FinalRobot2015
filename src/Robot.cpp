// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"
#include "Timer.h"
#include "Diagnostics.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
EagleWings* Robot::eagleWings = 0;
Drivetrain* Robot::drivetrain = 0;
Lift* Robot::lift = 0;
OI* Robot::oi = 0;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
void Robot::startDiagnosticLogging() {
	//starts logging and prints headers
	startLogging();
	///print header for log
	bufferPrintf("Gyro,\n");
//	for(int i = 0; i < 15; i++)
//		bufferPrintf("Channel %d current,", i);
//	for(int i = 1; i <= 3; i++)
//		bufferPrintf("Analog %d voltage,", i);
//	bufferPrintf("\n");
}
void Robot::logRow() {
//	for(int i = 0; i < 15; i++) {
//			bufferPrintf("%f,", i, powerDistributionPanel->GetCurrent(i));
//	}
//	bufferPrintf("%f,%f,%f,\n",analogInput1->GetVoltage(),analogInput2->GetVoltage(),analogInput3->GetVoltage());
//
	bufferPrintf("%f,\n",RobotMap::drivetraindriveGyro->GetAngle());
	printf("%f   %f\n",RobotMap::drivetraindriveGyro->GetAngle(), RobotMap::drivetraindriveGyro->GetRate());
}
void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	eagleWings = new EagleWings();
	drivetrain = new Drivetrain();
	lift = new Lift();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi = new OI();
	lw = LiveWindow::GetInstance();

	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand = new AutonomousCommand();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	joystick1 = new Joystick(0);
	//TODO: add code to ensure gyro has initialized
	RobotMap::drivetraindriveGyro->InitGyro();	//probably takes 10 seconds
	startDiagnosticLogging();
}

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){
	flushToDisk();
}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	if (autonomousCommand != NULL)
		autonomousCommand->Start();
	autonStartTime = -1.0;
	RobotMap::drivetraindriveGyro->Reset();
}

void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
	if(autonStartTime < 0.0) {
		autonStartTime = Timer::GetFPGATimestamp();
	}
	//TODO: code to detect gyroscope failure + fall-back mode (hard-coded constants)
	//TODO: refactor into DriveForwardAtAngle command
	double timeLeft = autonStartTime + 3.0 - Timer::GetFPGATimestamp();
	if(timeLeft > 0.0) {
		if(timeLeft < 1.0)
			RobotMap::drivetrainrobotDrive->MecanumDrive_Polar(-timeLeft/2.0,0,-0.02*RobotMap::drivetraindriveGyro->GetAngle());
		else
			RobotMap::drivetrainrobotDrive->MecanumDrive_Polar(-0.3,0,-0.02*RobotMap::drivetraindriveGyro->GetAngle());
	} else {
		RobotMap::drivetrainrobotDrive->MecanumDrive_Polar(0.0,0,0.0);
	}
	logRow();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to 
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand != NULL)
		autonomousCommand->Cancel();
	RobotMap::drivetraindriveGyro->Reset();
}

void Robot::TeleopPeriodic() {
	Scheduler::GetInstance()->Run();
//	RobotMap::drivetrainrobotDrive->MecanumDrive_Polar(0.0,0,0);
	//drivetrain->eagleDrive->MecanumDrive_Cartesian(oi->driverStick->GetX()*.5,oi->driverStick->GetY()*.5,oi->driverStick->GetRawAxis(4)*.5);
	RobotMap::drivetrainrobotDrive->MecanumDrive_Cartesian(joystick1->GetX()*0.5, joystick1->GetY()*0.5,joystick1->GetRawAxis(4)*0.5);
	printf("Teleop\n");
	logRow();
}

void Robot::TestPeriodic() {
	lw->Run();
}

START_ROBOT_CLASS(Robot);

