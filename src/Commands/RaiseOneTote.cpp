// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RaiseOneTote.h"

RaiseOneTote::RaiseOneTote() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::lift);
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

// Called just before this Command runs the first time
void RaiseOneTote::Initialize() {
	targetPosition = SmartDashboard::GetNumber("indexToteDistance") + Robot::lift->encoder->Get(); //41 ticks/inch at 15 inches
	Robot::lift->pidController->SetSetpoint(targetPosition);
	Robot::lift->pidController->Enable();
}

// Called repeatedly when this Command is scheduled to run
void RaiseOneTote::Execute() {
//	Robot::lift->speedController1->Set(.5);
	printf("raise one tote executing");
}

// Make this return true when this Command no longer needs to run execute()
bool RaiseOneTote::IsFinished() {
	//this is a hack solution
	//we want this:
	//return false;
	return Robot::lift->speedController1->Get() < .01 &&
			Robot::lift->pidController->GetSetpoint() - Robot::lift->encoder->Get() < 20; //.5 inch margin of error
}

// Called once after isFinished returns true
void RaiseOneTote::End() {
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void RaiseOneTote::Interrupted() {

}
